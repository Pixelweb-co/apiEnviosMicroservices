version: '3'
services:
  #account services
  accounts_service:
    build:
      context: ./accounts_api
      dockerfile: Dockerfile
    image: accounts_service:latest
    ports:
      - '3001:3000'
    environment:
      DB_HOST: db_accounts
      DB_PORT: 27017
      DB_NAME: auth_db
      JWT_SECRET: mysecretkey
    networks:
      - red_gateway
      - red_micros
      - red_data_layer
    restart: on-failure
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\uploads:/app/uploads
  
  #account services database
  db_accounts:
    image: mongo:4.4
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\mongodb_accounts:/data/db
    ports:
      - '27018:27017'
    networks:
      - red_data_layer
  
  
  #solicitudes services
  solicitudes_service:
    build:
      context: ./solicitudes_api
      dockerfile: Dockerfile
    image: solicitudes_service:latest
    ports:
      - '3000:3000'
    networks:
      - red_data_layer
      - red_micros
      - red_gateway
    environment:
      DB_HOST: db_solicitudes
      DB_PORT: 27017
      DB_NAME: auth_db
      JWT_SECRET: mysecretkey
    restart: on-failure    
    
  
  
  #solicitud services db
  db_solicitudes:
    image: mongo:4.4
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\mongodb_solicitudes:/data/db
    ports:
      - '27015:27017'
    networks:
      - red_data_layer
    restart: on-failure  
  

#ofertas services
  ofertas_service:
    build:
      context: ./ofertas_api
      dockerfile: Dockerfile
    image: ofertas_service:latest
    ports:
      - '3006:3000'
    networks:
      - red_data_layer
      - red_micros
      - red_gateway
    environment:
      DB_HOST: db_ofertas
      DB_PORT: 27018
      DB_NAME: auth_db
      JWT_SECRET: mysecretkey
    restart: on-failure    
    
  
  
  #ofertas services db
  db_ofertas:
    image: mongo:4.4
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\mongodb_ofertas:/data/db
    ports:
      - '27019:27017'
    networks:
      - red_data_layer
    restart: on-failure  


  # db admin
  database_admin:
    image: mongo-express
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_SERVER: db_solicitudes
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: secret
    networks:
      - red_data_layer

 #puerta de enlace       
  nginx:
    image: nginx
    ports:
      - "4488:4488"
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\gateway_api\nginx.conf:/etc/nginx/nginx.conf
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\uploads:/usr/share/nginx/html/
    networks:
      - red_gateway
    restart: on-failure
    depends_on:
      - socket_service
      - accounts_service
      - ofertas_service
      - contratistas_service
      - solicitudes_service
    
  
  #message broker rabbitmq
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      # - ./rabbitmq_data:/var/lib/rabbitmq/data
       - C:\Users\Edwin\Desktop\apiEnviosMicroservices\rabbitmq_data:/var/lib/rabbitmq
    networks:
      - red_micros
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 5
    

  #upload service
  upload_service:
    image: upload_service:1.0
    build:
      context: ./upload_api
      dockerfile: Dockerfile
    ports:
      - '6000:6000'
    networks:
      - red_micros
      - red_gateway
    restart: on-failure
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\uploads:/app/uploads/
    
    
  #socket services 
  socket_service:
    image: socket_service:latest
    build:
      context: ./socket_service
      dockerfile: Dockerfile
    ports:
      - '3004:3004'
    networks:
      - red_micros
      - red_gateway
    depends_on:
      - rabbitmq
      - redis_data
    restart: on-failure 
    
  socket_service_replica1:
    image: socket_service:latest
    build:
      context: ./socket_service
      dockerfile: Dockerfile
    ports:
      - '3010:3004'
    networks:
      - red_micros
      - red_gateway
    depends_on:
      - rabbitmq
      - redis_data
    restart: on-failure
    
   
  #calificacion services 
  calificacionService:
    image: calificar_service:1.0
    build:
      context: ./calificar_service
      dockerfile: Dockerfile
    ports:
      - '8080:3000'
    networks:
      - red_micros
      - red_gateway
      - red_data_layer
    depends_on:
      - rabbitmq
      - redis_data
      - db_calificaciones
    restart: on-failure

  
  #calificaciones services db
  db_calificaciones:
    image: mongo:4.4
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\mongodb_calificaciones:/data/db
    ports:
      - '27028:27017'
    networks:
      - red_data_layer
    restart: on-failure  

   
  #contratistas services 
  contratistas_service:
    image: contratistas_service:1.0
    build:
      context: ./contratistas_service
      dockerfile: Dockerfile
    ports:
      - '8086:3000'
    networks:
      - red_micros
      - red_gateway
      - red_data_layer
    depends_on:
      - rabbitmq
      - redis_data
      - db_contratistas
    restart: on-failure

  
  #contratistas services db
  db_contratistas:
    image: mongo:4.4
    volumes:
      - C:\Users\Edwin\Desktop\apiEnviosMicroservices\mongodb_contratistas:/data/db
    ports:
      - '27017:27017'
    networks:
      - red_data_layer
    restart: on-failure
  
  # #broker message monitor cluster
  # cluster_monitor:
  #   build:
  #     context: ./cluster_service_monitor
  #     dockerfile: Dockerfile
  #   ports:
  #     - '3005:3005'
  #   networks:
  #     - red_micros
  #   healthcheck:
  #     test: ["CMD-SHELL", "nc -z rabbitmq 5672 || exit 1"]
  #     timeout: 30s
  #     retries: 3

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8004:8001"
    volumes:
      - redisinsight-data:/db
    restart: unless-stopped
    networks:
      - red_micros
    environment:
      - REDIS_CONNECTION_HOST=redis
      - REDIS_CONNECTION_PORT=6379

  redis_data:
    image: redis:latest
    #container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - red_micros

#jenkins
  jenkins:
    image: jenkins/jenkins:lts
    ports:
      - "8090:8080"
      - "50000:50000"
    environment:
      - JENKINS_USER=admin
      - JENKINS_PASS=admin123
    volumes:
      - "jenkins_home:/var/jenkins_home"


#volumenes persistentes
volumes:
  uploads:
    driver: local
  jenkins_home:
    
  mongodb_accounts:
    driver: local
  mongodb_contratistas:
    driver: local
  mongodb_solicitudes:
    driver: local
  mongodb_ofertas:
    driver: local
  rabbitmq_data:
    driver: local
  redisinsight-data:
  redis_data:


#redes
networks:
  red_micros:
  red_gateway:
  red_data_layer: